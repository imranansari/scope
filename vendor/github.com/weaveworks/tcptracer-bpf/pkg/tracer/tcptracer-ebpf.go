// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\x01\x6c\x5b\xc7\x79\xbe\x47\x8a\x26\x25\xcf\x93\xe6\x94\x09\xcd\xa1\x98\xd2\x06\x89\x46\x34\xa9\x64\xcb\x32\xab\x36\x9d\xea\x36\xa9\xa6\x19\x13\x97\x99\xa9\x60\xac\xa5\x18\x96\xb6\x14\x3a\x36\x2d\xd2\x96\x5e\x98\x6d\x2e\x8a\x64\x02\x91\x05\xb2\x93\x16\x42\x96\x66\xa2\x2c\x27\xea\x9a\xad\x1a\xb6\xc1\x01\xda\x81\x5a\x97\x61\xc2\x16\x0c\xc2\x5a\x0c\x1a\xea\x01\x42\x97\x15\xda\x8a\x61\xda\x9a\x79\x42\xe6\x85\x03\xef\xff\x1e\xdf\x7b\xff\xbb\xf7\x48\xd9\x69\x4a\x20\x3d\xff\xdf\xbb\xff\xfe\xff\xee\xfe\xfb\xef\xbb\x7b\x4f\xfd\xed\x87\x8e\x3d\xec\xd3\x34\x61\xfc\x34\xf1\x3f\xc2\x94\xcc\xdf\xd8\xa7\xcc\x7f\x0f\xe1\x7f\x7f\x5e\x68\xa2\x7a\x27\x61\x4f\x0b\x21\x7e\x56\x08\x51\xea\xd8\xae\xd5\x65\x3d\x9d\x97\x78\x29\xba\x23\xe5\xea\x22\xd5\x0b\xfa\x84\xd8\xae\xd5\x6a\xd5\x2b\x90\xfd\x42\xec\xd4\x6a\xb5\x08\x33\x7a\xad\xcd\x6c\xd7\x57\x97\x81\x7f\x05\xa5\x7e\x57\x82\xd9\x1d\x96\x76\xae\xa1\x9d\x52\x74\xc8\x61\x77\x58\x61\xe7\x69\xd9\x67\x21\xc2\xa2\x53\x3e\xd1\xf7\x10\xde\x8a\x9e\x5f\x08\x71\x2a\x28\x44\xb7\x10\x62\x1a\x65\x32\xb8\x47\xe3\xfa\x43\x1e\x76\xab\x41\x92\xc3\xc1\x1a\xf5\xeb\x1c\x64\xed\xff\x48\x5e\xe4\xfd\xea\xa5\xf1\x2d\xa0\x9e\xff\x11\xe9\x47\xd2\x4f\xf3\xa6\x9f\x0b\x91\xff\x77\xd0\xf3\x6f\x7e\x98\xca\x88\x4f\x88\x5a\xad\x56\x33\xec\xdf\xff\xe1\xff\xa4\x71\x6e\x47\xbb\x2f\x6e\xd5\xa8\xdc\x44\xb9\x81\x72\x1d\xe5\x1a\xca\x55\x94\xaf\xa3\x5c\x41\xb9\x8c\x72\x01\xe5\x3c\xf9\xed\xa3\xf9\x2b\xc5\x26\x08\x8f\xe6\xc9\xff\x73\x5d\xe8\xcf\x0c\xc9\x53\x11\x92\x63\x3d\x54\x2f\x76\x11\x78\x37\xf0\x6e\xe0\xb3\x84\xe7\x7b\x08\xef\x98\x23\xf9\x7c\x2f\xc9\x27\xc8\xae\x5e\x8c\xd3\xf8\xcd\x50\xb4\x96\xca\xf0\x6f\x84\xfc\xd3\x67\x86\xe9\xf9\x54\x02\xed\xa3\x3f\xe5\x15\x5b\x3f\xd3\x53\x45\xf9\x3c\x13\xbb\x0e\x7f\x66\x20\xd3\x38\x55\x7f\x91\xc6\x6f\xba\x9d\xe6\x3f\xf7\xe2\x5b\x12\x9f\xf6\x09\x51\xf7\x28\x17\xfb\x21\xda\xc9\x43\x8f\xc6\x75\x72\xea\xa2\x94\x73\xb1\x2d\x3c\xff\xa2\x94\x4f\xf9\xa8\x9d\xb4\x3e\x2e\xe5\xd1\xcb\xd4\x7e\x5a\x9f\xa0\xb2\x70\x9a\xea\xf9\xa9\xde\xe8\xf3\x98\xbf\x41\xcc\x53\x8c\xe6\x29\xab\xa5\xe5\xb8\x87\xb5\xa7\x10\x4f\x97\x29\xce\x35\x4d\xe2\x01\xf1\xc7\xc2\x1a\x57\xb9\xe8\x23\x52\xaf\xf3\x19\x92\xab\x15\x2a\x83\x9a\x10\x8f\xd4\x6a\x35\x63\x1e\xab\x19\xc2\xeb\xf1\x5b\x5f\xa2\x93\x15\xd2\xcb\x45\xa9\x1f\x01\xf1\x32\xf5\x33\x3a\x56\xa3\xf2\x26\x9e\x1f\x47\x79\x03\x71\x30\x81\xe7\x3b\x88\x07\x9a\x7f\xa3\xfd\xce\x3b\x9c\x7e\x8c\xc1\x8f\x36\x8b\x7d\xfd\x5c\x77\x53\xbd\x9b\x4a\xbd\x9e\xa6\x7a\xc7\x2d\xfd\x36\xf5\x7a\x9b\xea\xdd\x50\xea\x51\x3c\x76\xde\xe9\xac\x3f\x81\xfa\x21\xc5\xf8\xea\xe7\x28\x7e\xf5\x2b\x34\x5e\x2a\x7b\x3b\x8a\xfe\xa5\x97\x30\xfe\x23\x94\x2f\xd2\x57\x68\x1e\x32\x83\xfd\x14\x7f\x8b\x98\x8f\x58\x9c\xe4\xca\x0d\xcc\xcf\x20\xd5\xbf\x4a\xf3\x92\x39\xf1\x09\x59\x86\xdb\x72\xb6\xb8\x9b\x46\x19\xf6\x53\x5c\x7e\x4e\xe6\x17\x21\xc2\xbe\x93\x24\x6b\x90\x35\x8a\x6b\xbd\x32\x6c\x9b\x77\x33\x9f\xcd\xd8\xf2\x82\xb5\x5f\x79\xf4\xab\x0b\xfd\xea\x62\x79\xb5\x97\xed\x23\x13\x8a\x3c\x1b\x10\x8f\xc8\x32\xac\xdd\x27\xf3\x64\x58\x7b\x50\x8e\x4f\x7d\x1d\x04\xe4\x73\x5a\xff\x86\x3f\x19\xc4\x69\x09\xf1\xdb\xf9\xb0\x7b\x1c\x7a\xcf\xd7\x98\xeb\x7c\x1d\x57\xcc\xd7\x29\x81\x71\x45\x59\xef\xc7\x7f\x59\xf2\xf5\xe7\xbb\xfa\x1a\x7e\x6a\xd2\xbf\x55\xac\xb7\x5e\xe6\x3f\xcd\xb3\x5e\xa1\x3c\xaa\x8a\x37\xeb\x7a\xe0\xfe\xa7\x2b\x88\x93\xe8\x75\xb4\x7f\x8f\xad\x7d\x63\xfd\x76\xee\x71\xb6\x7b\xc3\x33\x4f\x18\xf1\xf5\x16\xda\x3d\xc0\xfc\x46\x1e\xa8\x74\xbb\xfa\xbd\xe3\xe9\x37\xe2\x35\xba\x89\xf6\xf7\x31\xbf\x4f\x52\xbb\x8f\x3a\xdb\x3d\xe9\xe9\xf7\x49\xf8\xfd\x43\xb4\xeb\x93\xcf\xd3\x95\xe3\xb0\xb7\xe1\xe0\x19\xad\xc4\x65\x33\x7e\xf3\x53\xe3\x55\x11\xce\xab\x12\x6c\xbd\x0e\x3b\xec\x26\xbc\xf8\x0d\xe2\x24\xbc\x47\x38\x78\x91\x9b\x5e\x7d\x9d\xea\x27\x31\x0e\x2d\xf2\x37\x93\x47\xfd\x98\xfa\xd1\xe0\x51\xc4\x73\xf4\x4a\xa2\xc1\x47\x84\x85\x4f\xe8\x53\xa8\xe7\x7b\x94\x78\x94\xef\x47\xc4\xa3\xa6\xc0\xa3\xc0\x9f\xbe\x89\x75\x1c\xd1\x18\x8f\xba\xe3\x5f\x84\x7d\x7c\xc0\x9b\xa2\xd8\x8f\xa3\xe0\x4d\x58\xaf\xa5\x28\x78\x46\x14\x3c\x23\x0a\x5e\x12\x05\x6f\x8a\xce\xa3\x9c\x43\x49\x7c\xe7\x9a\x1f\x3c\x6a\x70\x0c\xfb\xfc\x38\xfc\x27\x1e\xa5\x17\xc0\x9f\x06\xf3\x78\x3e\x01\x9e\x48\xfb\xa3\x5e\x04\x5f\x1a\x21\x5e\x55\x1a\x04\xef\x2a\xf4\xe2\x79\x1c\xcf\x61\x77\x10\x3c\xab\x80\x7c\x56\x1c\xc6\x73\xf8\x39\x08\x9e\x55\x00\x7f\x1a\x5c\xb6\xf5\x2b\x5d\x04\x6f\x1a\x79\x13\x7c\x0c\xbc\x69\x84\xc6\xa5\xfa\x10\x8d\xd7\x74\x00\xbc\xe9\xc4\xf7\x88\x37\xb5\x81\x37\x8d\xfc\x03\xda\x01\x6f\x1a\xa1\x71\x9c\x2c\x82\x37\x8d\x6c\xe0\x39\xf8\x50\x1b\x78\xd3\x79\xda\x8f\x46\x8f\x63\x3e\x46\xc0\xe3\x8a\xc4\xa7\xd2\xe7\xc1\xb3\x60\x77\x14\x7e\x94\x4e\x18\xf3\x12\x47\x49\xfb\x66\xd2\xf7\x75\x51\x0f\xe1\xea\xab\x88\xc3\xa0\x10\xaf\xd7\x6a\xb5\xce\x01\x92\xad\x79\xa4\xd7\xb2\x5f\x39\xf6\x85\x0a\xda\xbd\x2b\x84\x78\xec\x85\x8c\x76\x2c\x71\xde\xcd\xd6\xf1\x98\x72\x5f\x7b\x81\xfa\x11\xc2\xbe\x81\x32\x19\x7a\x9e\xc5\x23\xec\x44\xc1\x9f\xa3\xdb\x28\xb7\x90\xd7\xde\x41\xb9\x03\x7c\xd3\xc6\xdb\xf4\x73\x34\xbf\x9c\xef\xd4\xfd\xea\x72\xe9\x7f\xc8\xb6\x1f\xba\xeb\x47\x98\x7e\xf7\x2e\xf4\xad\x7a\xdb\xbb\xb4\x1b\x62\xfa\x5b\x4a\xfd\xe6\xfc\xf0\x9d\x5b\xe4\x87\x3b\xbb\xe4\x87\x9b\x2d\xf1\x8d\x4d\x57\xbe\xa1\xe4\xbf\x5f\x47\x5c\xbc\x48\xf9\x44\x7f\x05\xf1\xf1\x38\xe5\x95\x6a\x9a\xf4\x47\x2f\x51\xa9\xbf\x8a\xb8\x79\x12\x79\x65\x19\xe7\xc5\x32\xe5\x9b\xc9\x25\xc4\xd1\xc8\x0c\xf8\xe5\x0e\xf8\xe5\x93\x8c\x7f\x3e\x45\x7c\x52\xfb\x24\xf9\xf9\x25\xd8\x69\xe4\xeb\x8f\x13\x8e\xfb\x06\x93\x47\xd2\xf8\x54\xef\xe6\xf8\x61\x29\x97\x46\x42\xc8\x4b\x5d\xc8\x7f\x11\xb6\x6f\x0d\xd9\xd6\xb7\xb1\x1f\x18\xeb\xc3\x3a\x5e\x71\x05\xef\x4c\xb6\xd3\x46\x66\x8c\xcb\x29\x0d\xeb\x0e\x65\x44\xee\x2b\xe6\xbe\xf0\xc1\xbb\x69\x43\x4a\x06\x0f\xd8\xfa\xd9\x4c\xef\xf3\x77\xd3\x04\x4e\xef\xa1\xe7\x99\xc7\x69\x5e\x8c\xf5\x9d\x29\xdf\x03\xff\xa9\xbf\xd7\x35\xf2\x2f\x17\xed\x01\x1e\x61\x78\x0c\x78\x17\xd6\xf5\x47\x1c\xfb\x37\xcf\x37\xbd\xca\x7c\x83\xfe\x5b\xf4\xc6\x5a\xd0\xdb\x0d\xcf\x09\x49\xbe\x31\xc4\xe6\x8d\xf2\xbc\x7e\x8a\xf2\xba\x3e\x91\x77\xf8\xb1\xe1\xc5\x0b\x70\xbf\x11\x6e\xbf\x4a\xfa\x88\xe7\xa4\x76\x45\xee\xf7\xd5\x73\xea\x79\xa9\x9f\x0f\x82\xb2\xde\xcb\xb2\x1d\xce\x7f\x72\xd8\xe7\x5a\xbf\x5f\x22\xe2\xa1\xe3\x79\x58\xeb\x90\xf6\x6f\xbf\xdd\x32\xe6\xe7\x77\xd0\x3e\xed\xd3\xd5\x2f\x53\x3d\x55\x3e\x58\x51\xe4\x9f\xc9\x0a\xd9\x4d\x6a\xff\x5e\xf3\xd9\x78\xf9\x0a\xe2\x66\x1b\xfe\x6d\xa2\xbc\x59\xb3\xfa\x9d\xc1\x7e\xa2\x5f\x8a\xb4\x6c\xdf\x96\x8f\x2e\x75\x37\xd5\xdb\x56\xea\xf5\x34\xd5\xdb\x54\xe5\xdb\x4b\xbd\x4d\xf5\x6e\x2a\xf5\x90\xa7\x23\xce\xfa\xc3\xd6\x3c\xfd\x65\x73\x9e\x48\xcf\xc8\xd3\xc3\xae\x79\x7a\x4b\x79\x8e\xc7\xf8\x8f\xcc\x23\x8f\x6e\x23\x8f\xbe\x84\x3c\x8b\xf9\x88\x11\x2f\x9b\xac\x18\xf7\x2d\x8b\x54\xff\x2a\xcd\x4b\xe6\xc4\x12\xe5\xdd\xb6\xcf\x48\x7b\xce\x73\x3c\x25\x5c\xf3\x1c\xff\x4b\x24\x37\xf2\xec\x83\xa4\xe7\xb8\xef\xa4\x75\x12\x10\x74\x3e\xb5\xc6\xed\xbc\x67\xdc\x1e\x92\xb2\x19\xff\x6a\x7e\xac\x8a\x1b\xc9\x1b\xfc\xf6\xf1\x7d\x5a\xfa\x60\xde\x03\xeb\x57\x28\x8f\xf0\x7e\x96\x06\xcd\xf3\x8c\x66\xb9\xa7\x4a\x57\xfe\x14\x71\xfc\x1b\x90\xe7\x21\xe7\x21\xbf\x04\xb9\x08\x99\xc6\xbb\xba\x9f\xfc\xb8\x8e\xfd\x22\x17\xa3\xfd\x6f\x1a\xf9\xd7\xcc\xc3\xd8\x07\x2b\x4b\x68\xe7\x29\xe4\x65\xa3\xdf\xd8\x57\x2b\x46\xff\xb1\x0f\x2f\xa1\xff\x6d\x14\x5f\xc6\xfe\x13\xf1\xd9\xc7\xf5\x5a\x40\x88\x38\xc6\xe1\x40\x8b\xf3\xe0\xb7\x9c\x67\xcd\xbc\xe4\xa3\xbc\x84\x7a\x8d\x73\xe1\x6d\xe7\x95\xff\xae\x75\x28\xf2\x9d\x79\xde\xd9\x25\x2f\xbd\x94\x50\xfa\xa3\xe2\xa5\xc3\x2a\x7e\xe7\xa1\xcf\x79\xe9\xfc\x2e\xf4\x9b\xf2\x52\x0f\xbb\x2d\xf1\xd2\x16\xf2\x9d\x92\x97\xb6\x90\xef\x94\xbc\xd4\x23\xdf\x6d\xb6\x94\xef\x76\xc9\x4b\x1b\xf7\x84\x14\x37\xfa\x55\xc4\x07\xce\x67\xa3\x61\xc4\x23\xf2\x60\x69\x90\xd6\x8f\xbe\x04\x3e\x6a\x9c\x13\x17\x11\x3f\xb1\x75\xe4\x45\xf0\xd1\xe8\xdf\xd3\x3a\x5c\x00\x1f\xed\xa0\x73\x67\x38\x50\xa1\xf6\xfb\xa9\xfd\x70\xdb\xef\x4b\xd9\xcc\x87\x5f\x23\xb9\x91\x0f\x7f\x8f\xf2\x8b\xf3\xfd\x8f\xcc\x87\xd6\xf5\xb7\xe2\xb9\xfe\x2e\x3b\xf6\x7b\xb7\xfa\x94\x37\x9f\x65\xfc\x48\x7d\x7f\xa0\x8a\xdf\x9f\x4c\xde\x7c\xc9\x96\x37\x75\xac\x77\x7d\x11\x79\x2c\x66\xbf\xdf\x35\xf2\x9d\xbe\x88\x7b\x11\xbc\xcf\x29\x45\xf1\xbe\xa7\xb2\xee\x92\x57\xe9\x5e\x82\xf3\xe5\xea\x07\xa8\x4c\xd1\x35\xa5\xbc\x3f\x90\x79\x17\x65\x6e\xe4\x72\x23\x1f\x4b\xfe\x1c\x7d\x01\x76\x96\x59\xde\x5d\xb8\xe5\xbc\x9b\xb0\xe4\xdd\x80\xa0\xfe\x19\xbc\x96\xf3\x58\xf3\x5e\x2d\xde\x90\xe5\xfa\x09\x21\xae\x27\x77\xc9\x6f\x1b\xf7\x5e\x1f\x21\x7d\xf0\xd9\xa4\x16\x93\xf1\x55\x7a\x1c\xe7\x1b\xbc\xd7\xb9\x06\x3b\xa5\x32\x8d\x7f\xa6\x4c\xf1\x6f\x9c\x3f\xab\x78\x9f\xa4\x5a\xaf\x6b\xca\x73\xb2\xb1\xce\xd7\x5c\xd7\xf9\xf7\x14\xeb\xbc\x54\xa6\x38\xcb\x95\x17\x1c\xf1\xef\xf5\xbe\xd4\xc9\xa3\x3b\x89\xc7\x4f\x60\xfc\x5e\xe9\x55\x9e\xfb\x72\xd1\xdb\xb5\xf3\xeb\xde\xfb\xa2\xc7\xb8\x2d\x28\xf7\x45\xf8\xc3\xfc\x4e\x6a\x5b\x8c\x7f\xcf\x35\xe1\xdf\x43\x76\xfe\x6d\xbc\x47\xf3\xf0\x67\xce\xeb\x3d\x9a\x87\x9e\x92\x7f\x1b\xf7\x24\x1e\x7a\x4a\xfe\x6d\xdc\x93\x78\xe8\x29\xf9\xb7\x71\x4f\x72\xc0\x59\x7f\xc8\xba\x1f\x3d\x6f\xce\xa7\x3d\x4e\x87\x76\xc9\xbf\x31\xfe\xb8\xf7\x34\xf9\xf7\x12\xe3\xdf\xcb\x8c\x7f\xff\x01\xe3\xdf\xaf\x81\x7f\xd3\x82\x75\xf2\x6f\x3a\x28\x9b\xfb\x0d\xc5\x9f\xb1\xdf\x24\xb5\xbf\x23\x7f\x2d\xf1\x5b\x8f\xab\x80\xf8\x8b\xf7\x24\x0e\x93\xda\x12\xe3\x67\xc6\x7d\xc9\xdc\xad\xf1\x33\xe3\xfe\x8d\xf9\xa3\xe2\x67\x43\x5e\xf7\x77\x0a\x7d\xce\xcf\xe6\x76\xa1\xdf\xf2\xbd\xa1\xc2\xee\xae\xee\x0d\x3d\xec\x7a\xde\x1b\x7a\xe8\x79\xde\x1b\x2a\xd6\xc3\x66\x4b\xeb\x61\x97\xfc\x6c\x09\x71\x61\x7c\x47\x71\xc5\x78\x5f\xb0\x8c\x7d\x1d\x71\x12\x03\x0f\xa8\x6c\xd9\xce\x75\x93\x0b\x88\x9b\x0e\xda\x27\x27\xf1\x9e\x39\x77\xe2\x3b\xb4\x5e\x5e\x05\x2f\x7b\xf2\x0d\xca\x8f\x47\xc8\x9f\xd1\xcf\x52\x19\x0e\x9e\x22\x3f\x71\x6f\x3e\x7a\x9f\x81\xd3\xbd\xfe\xe7\xc0\x0e\xc2\xe2\x31\x92\x03\x90\x03\x74\xff\x9f\x6c\x0b\xc8\x92\xaf\xbf\x88\x5c\x7e\x96\xfb\xbb\x4f\xd3\x7d\x57\xd2\x47\x1b\x67\xf3\x7b\xbb\x2f\x35\xc6\x37\x60\xb9\xc7\xe2\xf7\xf3\xa5\xb2\xf9\x3d\x8f\x5f\xae\x97\x04\xc6\x29\xce\x78\xca\x71\xb6\x8f\x8d\x63\x1c\x0d\xde\xf5\x1a\xd6\xdb\x04\xe4\x6f\x43\x3e\x6d\xe3\x59\x4e\x1e\x45\x3c\x2c\x12\xb4\xfb\x6f\xd4\x4b\xe1\x7d\xd8\x34\xea\x9b\x7a\x53\xcc\xbf\xa2\x83\x67\x8e\x29\xee\x4d\xf5\x0a\xce\xcf\x8b\xe0\x7f\xf8\x8e\xa1\x0a\x9e\x3d\x8d\xf7\x36\x55\x0a\x7f\xc7\x7b\xf0\x2a\xf8\x7e\x58\x60\x5f\x33\xe4\x36\x22\x58\x55\x7a\xfd\xd5\x98\x77\xb3\xfe\x7e\xdb\xf3\x54\x5e\xd8\xf5\x25\x0b\xb3\xf3\xbc\x21\x0f\x9e\x67\x9c\x6f\xf8\x39\xdb\xe8\x9f\x6b\xbf\xf6\xdb\xed\x66\x06\x8d\xfd\x84\x78\xe8\xf5\x00\xc6\x17\xdf\x2d\xb9\x8f\xff\x8b\x6c\xfc\x5f\x72\xf0\x99\x39\xcf\x73\xc6\xd6\xbb\xbc\xfe\x82\x67\xfd\x1f\xbc\x2b\xde\xd7\x78\x5e\x60\xf1\xbc\x64\x8b\xe7\x34\xf8\xba\x5b\x3c\x3b\xef\x5b\xa6\xd8\x3a\x69\x2d\x5e\x6f\x37\x1e\x02\xe2\x5b\xef\xeb\xb8\x19\xe7\x16\x7d\x11\xe7\x19\x8c\x87\x79\xae\xe1\xe7\x31\xbc\xff\x35\xbe\xbb\x73\xcd\x13\xb3\xea\xf3\x16\xf6\x89\x14\xde\x8b\x4f\x63\x3f\xbf\x8e\x32\x37\x58\x66\xfe\x3f\xfb\x13\x1b\xf7\x84\x1c\x63\x3a\x2f\x9a\xef\xf5\x77\xec\xe3\x73\xc0\xfe\x3d\x83\xf1\x3d\x02\x3f\x77\x85\xdb\xe9\xfe\xd3\xba\x3e\x54\xdf\x4f\x38\xcf\x5d\x83\xb2\x34\xcf\x5d\x71\x3a\x77\x95\x71\x5e\x46\xfb\xb9\x32\xbe\x7f\x29\xbf\x0d\x7e\xd4\x7c\xbf\x7f\x7b\x17\x3c\x21\x88\xef\x03\x9a\x7d\x87\x56\x2a\x83\x8f\x96\xb7\x5b\x3e\xf7\xa9\x79\x8e\xc1\x1f\xb6\x5c\xf9\x83\xea\xbc\x50\x2a\xcf\x63\x1c\xc6\x1d\xf9\xcb\xfb\xbe\x98\x9f\xc7\xf6\xb1\xf7\x27\x68\x37\x7a\xbb\xed\xfe\xca\x2d\x9f\xf3\xc6\xeb\xfd\x0d\xe1\x3d\x97\x83\x67\x8f\x83\x67\xff\x6b\xcd\x67\xcb\x0f\xf8\x8e\x02\xef\x23\x39\xcf\x28\x45\x8d\xf7\x94\xc8\x8f\xf8\x8e\xd5\x3c\x1f\x7a\x7f\x5f\x92\xae\xe0\xbc\x12\xa5\xef\x30\xcc\xf7\x8a\xaf\xb5\x7c\x5e\x5c\xf5\x38\x2f\xaa\x78\xe7\x1b\xd6\xef\xb4\x18\xef\x34\xbf\x03\xc3\x3d\x5d\x85\xd6\x83\x99\xb7\xff\xc6\x91\x2f\x56\x94\xbc\xc2\x9e\xb7\x8c\xef\x66\xa7\x51\x86\x7d\x7f\x6d\xc9\x5f\xf4\xab\x0f\xd9\xfd\xfb\xdf\xc0\xb8\xac\xd9\xf4\xcd\x73\xd7\xaa\x72\x1e\x28\xbf\x68\xe2\xfe\xfd\xc4\xb3\xac\xf9\xaa\x1e\x5f\x7a\x65\xcc\x61\x4f\x8e\xef\x15\x9a\xbf\x80\x78\xe6\x3d\x8e\xa3\x6f\xc8\xf3\xda\x7b\x17\x47\xf8\xee\x7b\x97\xdf\x2f\x99\xf1\xf5\x96\x4b\x7c\x35\x3f\x87\xad\xdf\xe6\x39\x6c\x63\x97\xfa\xfc\xfc\xb9\xea\xa1\x6f\xc4\x77\xb0\xdd\x79\xee\x5c\xf3\x38\x5f\x99\x71\xbe\xe9\x12\xe7\x3f\x68\x31\xce\xd7\xb0\x7f\xd3\xf8\x27\x7d\x78\x0f\x8f\xfe\x34\x3f\xc7\xb4\x23\x0e\xf1\x1e\x7d\x89\xe6\x35\xd9\x46\x07\xab\xea\x61\xb4\x83\xef\xa1\x8c\xef\xb1\x28\x2b\x58\xce\x37\x81\xbe\x46\xff\x28\xde\xf0\xfd\xd9\xab\x88\xab\x27\xcd\xef\x7a\x7d\x96\xf7\x66\x99\xc7\x8b\x8c\xbf\xd8\xf9\x47\xba\xf2\x26\xe2\x67\x16\xf2\x75\xc8\xcf\x42\x36\xee\xbb\xe6\x6c\x3c\x2f\x17\xbd\xcc\xe2\xef\x05\xc7\x78\xce\x28\xc7\x73\xb6\x49\xde\x18\x72\xc9\x1b\x0f\xc2\xde\x9c\x4b\xde\xf8\x58\x93\xbc\x71\xd8\x91\x37\xc6\x3d\xf2\x46\x15\x7f\xdf\xe1\xe4\x97\xf4\xfd\xc6\x28\xbe\x83\x09\x6b\xf4\x7d\xc7\xe8\xa7\x21\xfb\x7b\x6c\xe3\xe6\xf4\xf3\x9e\x26\x7e\x76\xdf\x52\x7e\x33\xf9\xd8\xbf\x49\xb9\xcd\xf2\x9f\xc0\x37\x20\x2a\x4c\x03\x0f\x0b\xb5\x80\x75\x19\x71\x69\xc1\x7a\x14\x58\x5d\x6f\x16\xff\xae\xff\x3e\x9b\x38\x26\xde\xb5\x7c\xb3\xa9\xfa\x7d\x55\xbe\x17\x09\x88\xde\x3d\x76\xfc\x93\xc0\xbb\x82\x76\xfc\xbb\x3e\xc2\xd7\x18\xfe\x15\xe0\xc3\x7e\x3b\x1e\x05\x9e\x67\xf5\x7f\xac\x11\xde\x13\xb2\xe3\x7f\x0e\x3c\xc1\xfc\x79\x06\xfe\x5c\x64\xf5\x4f\x02\x9f\x63\xf8\xaf\x02\x5f\x60\xfe\x7c\x17\xed\xaf\xb2\xfa\x57\x81\xaf\x33\xfc\x6f\xa5\xff\xed\x22\xc1\xfc\xdf\x0f\x7c\x96\xe1\x3f\xd2\x08\xef\x66\xed\xfc\x19\xf0\x04\xc3\x5f\xf1\x13\x3e\xce\xf0\x37\x51\x7f\x85\xf9\x3f\x20\xe5\xbd\x62\x9d\xe1\xbf\xeb\x23\x7c\x2c\x60\xc7\x3b\x80\xcf\x32\xfc\x9f\x35\xc2\xe7\x19\xfe\x87\xc0\x97\x19\xfe\x27\x68\x67\x83\xf9\xf9\x9b\xc0\x43\xed\x76\xfc\x17\xe0\xe7\xb2\x1d\x16\x27\x51\x9f\xff\xb1\xdd\xff\xc2\x6e\x82\xe1\xcf\xc9\x76\xf6\x89\xb1\x36\x3b\x7e\x06\xf8\x4c\x87\x1d\x7f\x14\xf8\x1a\xc3\xff\xd2\x47\xf8\x06\xe7\xc3\xc0\xf3\xac\xfd\xdf\x42\x3b\xf3\xac\x9d\x07\x8c\xf6\xd9\xbc\x9f\x47\x3b\x3b\x0c\xbf\x80\xfa\x11\xd6\xce\x17\x80\x8b\x9f\xb1\xe3\x0f\x03\xdf\xde\x6b\xc7\xef\xf5\xab\xfd\x8f\x00\xcf\x33\x7c\x09\xfe\x5c\x64\x78\x0a\xf8\x16\xc3\xbf\x25\xf1\x4e\xb1\xcc\xc6\xe1\xfb\x1a\xe1\xdd\xac\x5f\x2f\xfb\x09\x9f\x60\xf8\x37\xd0\x0e\x8f\x93\x27\x80\x6f\x32\xdc\x07\x7c\x9b\xe1\x5f\x03\xbe\xc3\xfc\xfc\x2b\xf8\x93\x60\xf9\xf8\x65\xe0\xe3\x0c\x7f\x5a\xee\x9b\x11\xc1\x7f\xf7\x4a\xfc\x80\x03\x7f\x5b\xee\x9b\x77\x38\xf0\x8f\x4b\xfc\x03\x0e\xfc\x0b\xb2\x9d\x7d\x0e\xfc\xa3\x12\xdf\xeb\xc0\xbf\x23\xf3\xb9\xdf\x81\x9f\x90\x78\xd0\x81\x07\x25\xde\xe9\xc0\x97\x25\x1e\x70\xe0\x43\x12\x6f\x77\xe0\x9b\xd2\xff\x9f\x73\xe0\xf7\x49\x7c\xbf\x03\x0f\x4b\xff\xef\x72\xe0\x1d\x92\x47\x86\x1d\xf8\xaf\xc9\x76\xee\x74\xe0\xc3\x28\xeb\xd3\x53\x67\x5e\x71\x26\xe7\x99\xbc\x62\x91\x8f\xd6\xe3\x7b\x8f\x29\xd7\xb7\xfa\x95\x90\xfd\xb9\xb5\xfd\x38\x6b\x3f\xce\xda\xaf\xcb\x0b\xac\xfd\x79\xbf\x5d\x0e\x85\xec\xf6\x86\x2c\xf2\x67\x98\xbd\x7a\xfd\x75\x26\xf7\x68\x76\x79\xd3\x6f\x6f\x2f\x1e\x30\xe5\xfa\x5c\x4d\x04\xec\xcf\xb7\x98\xbd\x48\xbb\x5d\x5e\xe9\x30\xe5\x4f\x09\x81\xbf\xe2\x32\xed\x0d\x31\xfb\xcb\x4c\x5e\x6d\xb7\xdb\x9f\xe9\xb0\xdb\x5f\xee\xb0\xdb\x5b\xdf\x6b\xaf\x3f\xbc\xcf\x6e\x7f\x8c\xd9\x5f\x63\xf6\xba\x7d\x76\x79\xb6\xcd\xde\xde\x6a\x88\x8d\x47\xbb\xbd\x7d\xf1\x40\x31\x3b\x53\x14\xb9\xa9\x6c\x31\x3f\x75\xf6\xb1\x6c\x2a\x35\x79\x26\x5b\x4c\x65\x0a\xb9\x54\x3a\x93\xc9\xe6\x8b\xe2\x81\xa9\xec\xe9\xc6\xe3\x8f\xf2\xa7\x16\xc5\x62\x26\x9f\xba\x30\x90\xca\x9c\x3d\x73\x26\x9b\x29\x8a\x9c\x1a\xb6\x37\xa7\x7a\xa8\x7c\xc2\xed\xf4\xab\xed\xf4\x7b\xd9\xe9\x77\xb5\x63\x3e\x79\x22\x9d\x2f\xd4\xb1\xe2\x54\x3a\x93\x9d\x4a\x15\x8a\xe9\xe2\xf9\x82\x48\x5d\xc8\x4e\x15\x26\xcf\x9e\xb1\x19\x2b\x64\x8b\xf2\x79\x96\x37\x67\x3e\xb0\x56\xcf\x9c\x3e\x5b\x70\x54\x25\x30\x75\x7a\x32\x93\x3d\x53\x7f\x5a\x28\x4e\x15\xd3\x8f\x89\x07\x0a\xfa\x13\xf5\xf2\xd8\xd1\xa3\x03\xa9\x8f\xd5\x8b\xbe\xd4\x41\x59\xf6\xa7\xfa\x64\x79\x08\x65\x1f\xca\x81\x54\x9c\xe0\x38\x6a\xc7\x09\xed\x8b\x43\x0b\x8f\xfb\xf0\xdc\xc0\x8f\x50\xb5\x83\x47\x50\xed\x08\xaa\x1d\x41\xb5\x23\x8d\x11\x49\x65\x2f\x64\xcf\x14\x53\x93\xf9\x0b\x03\x84\x61\xc8\x0a\x67\x33\x39\x0b\x5a\x3c\x9f\x3f\x9d\xcd\x4f\x7e\x91\xa0\x63\x47\x8f\x1e\x4e\x0d\x50\xdb\x03\x30\x05\xf4\x20\x60\x43\xee\x83\x4c\x65\x1f\xca\x81\xd4\x61\x7a\x7c\x18\xda\x87\xa1\x05\xb9\x0f\x8f\xa9\x3c\x84\xb2\xaf\x5e\x3a\x1d\xef\x57\x3a\xde\xef\x74\xbc\x9f\x1a\xed\x27\x5b\x90\x0e\xa1\x3c\x08\xb8\xaf\x1f\xa6\x8c\xe7\x87\x30\xf4\x87\xe0\x12\xca\x43\x07\x81\x1f\x04\x8e\xf2\x50\x1f\xda\xeb\xc3\x73\xc8\x7d\x90\xa9\x1c\x48\x1d\xec\xa5\xae\x1d\xec\x15\xb7\xff\x7b\x0e\xef\x05\xf8\x6f\x99\x3e\xc3\x15\x7f\xc4\x1e\x32\x7a\x20\xe5\xfa\x7f\xec\xf8\x80\xff\xef\x06\xe7\x8f\xd1\x1d\xf1\x4e\x13\xfd\x19\x86\x33\xda\x22\x6e\x48\xd6\xee\xfc\x4d\xd0\x9f\x77\x08\xbc\x96\x13\x51\xbc\x6f\x32\xf4\x0d\xfc\x9f\x5c\xec\xbf\x8e\x92\xf3\x27\x6e\xff\x1f\x5d\xec\xcf\xc0\x7e\xc2\x62\x3f\xa0\xb0\x7f\xd9\xc5\xfe\x3c\x1a\x6d\xd6\xff\xe7\x5c\xec\xaf\x29\xfa\x1f\x54\xd8\x3f\xef\x62\xbf\x0b\xfb\x52\xbe\x49\xff\xcf\xb9\xd8\xdf\x80\xfd\x71\x8b\xfd\x76\x85\xfd\x5f\xd6\xd4\xf6\x2f\x82\x22\x6d\x74\x78\xdb\x7f\x48\x53\xdb\x8f\x7f\x82\xca\x39\x8b\xfd\xbd\x0a\xfb\x45\x17\xfb\x63\x1f\xa4\x32\xbf\xcf\xdb\x7e\xde\xc5\xfe\x1a\xec\x5f\xb4\xd8\xdf\xa7\xb0\x7f\xaf\xcb\xf8\xaf\xc5\xe0\x7f\xbb\xb7\xfd\x0f\xb9\x8c\xff\x30\xd6\xaf\x75\xfc\x3b\x15\xf6\xbf\xef\x23\xfb\x3c\x07\x8c\xe1\xfd\x32\x67\xe0\x7c\xfd\x7e\xc8\x45\xff\x74\x8b\xfa\xff\xe1\xa2\x7f\xb1\x45\xfd\x01\x17\xfd\x17\x5a\xd4\x0f\xf8\xd5\xfa\xcb\x2d\xea\x1f\x73\xb1\xff\xed\x16\xf5\xbb\x34\xb5\xfe\x7a\x8b\xfa\xcf\xb8\xe8\xbf\xd5\xaf\xae\xcf\xf3\xf7\x7d\x2e\xfa\x5b\x2e\xfa\x5c\xfe\x2a\xee\x61\xf9\x6f\x1b\xfa\x33\x96\xf3\xc4\x61\x4b\xfc\x19\x27\xc4\xff\x0f\x00\x00\xff\xff\x18\x4b\x63\xbf\x18\x48\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 18456, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

